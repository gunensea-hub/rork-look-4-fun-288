import React, { useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import createContextHook from '@nkzw/create-context-hook';

export type Language = 'en' | 'tr';

interface LanguageContextType {
  language: Language;
  setLanguage: (lang: Language) => Promise<void>;
  t: (key: string) => string;
}

const translations = {
  en: {
    // Header
    appName: 'Look4Fun',
    appDescription: 'Look for fun with ai fashion review',
    
    // Settings
    settings: 'Settings',
    language: 'Language',
    selectLanguage: 'Select Language',
    english: 'English',
    turkish: 'Turkish',
    
    // Upload Section
    uploadYourOutfit: 'Upload Your Outfit',
    uploadSubtitle: 'Take a photo or choose from gallery to get your outfit rated',
    takePhoto: 'Take Photo',
    chooseFromGallery: 'Choose from Gallery',
    
    // Privacy
    privacyProtected: 'Privacy Protected',
    privacyMatters: 'ðŸ”’ Your Privacy Matters',
    privacyExplanation: 'Your face is automatically masked before sending to AI analysis. Only your outfit is analyzed, ensuring your identity remains private.',
    faceProtected: 'Face Protected',
    
    // Categories
    chooseStyleCategory: 'Choose Your Style Category',
    categorySubtitle: 'Select the style you\'re aiming for to get a more targeted analysis',
    sexy: 'Sexy',
    elegant: 'Elegant',
    casual: 'Casual',
    naive: 'Naive',
    trendy: 'Trendy',
    anime: 'Anime',
    sixties: '60\'s',
    allCategories: 'All Categories',
    
    // Category descriptions
    sexyDesc: 'Bold, alluring, confident',
    elegantDesc: 'Sophisticated, refined, graceful',
    casualDesc: 'Relaxed, comfortable, everyday',
    naiveDesc: 'Sweet, innocent, youthful',
    trendyDesc: 'Fashion-forward, current, stylish',
    animeDesc: 'Kawaii, colorful, playful',
    sixtiesDesc: 'Retro, mod, vintage vibes',
    allCategoriesDesc: 'Get results for all 6 categories',
    
    // Analysis
    analyzing: 'Analyzing...',
    rateMyOutfit: 'Rate My Outfit',
    yourStyleScore: 'Your Style Score',
    overallStyleScore: 'Overall Style Score',
    selectedStyle: 'Selected Style:',
    analyzedForStyle: 'Analyzed for Style:',
    analysisType: 'Analysis Type:',
    
    // Analysis sections
    styleAnalysis: 'Style Analysis',
    colorCoordination: 'Color Coordination',
    accessories: 'Accessories',
    overallHarmony: 'Overall Harmony',
    overallAnalysis: 'Overall Analysis',
    categoryBreakdown: 'Category Breakdown',
    improvementSuggestions: 'Improvement Suggestions',
    
    // Buttons
    newPhoto: 'New Photo',
    chooseDifferentPhoto: 'Choose Different Photo',
    changeStyleCategory: 'Change Style Category',
    changeRatingCategory: 'Change Rating Category',
    backToCategories: 'Back to Categories',
    rateNewOutfit: 'Rate New Outfit',
    
    // History
    yourRatingHistory: 'Your Rating History',
    historySubtitle: 'Your last {count} outfit ratings with privacy protection',
    noRatingsYet: 'No ratings yet',
    noRatingsSubtext: 'Upload your first outfit to get started!',
    
    // Subscription
    freePlan: 'Free Plan',
    premiumPlan: 'Premium Plan',
    ultimatePlan: 'Ultimate Plan',
    upgrade: 'Upgrade',
    manage: 'Manage',
    analysesRemaining: '{count} analyses remaining today',
    unlimitedAnalyses: 'Unlimited analyses remaining',
    
    // Errors
    permissionNeeded: 'Permission needed',
    cameraPermissionRequired: 'Camera permission is required to take photos.',
    error: 'Error',
    failedToPickImage: 'Failed to pick image. Please try again.',
    failedToAnalyze: 'Failed to analyze outfit. Please try again.',
    analysisLimitReached: 'Analysis Limit Reached',
    analysisLimitMessage: 'You\'ve reached your daily limit of {limit} analyses. Upgrade to Premium for unlimited analyses!',
    maybeLater: 'Maybe Later',
    upgradeNow: 'Upgrade Now',
  },
  tr: {
    // Header
    appName: 'Look4Fun',
    appDescription: 'AI moda deÄŸerlendirmesi ile eÄŸlenceli gÃ¶rÃ¼nÃ¼n',
    
    // Settings
    settings: 'Ayarlar',
    language: 'Dil',
    selectLanguage: 'Dil SeÃ§in',
    english: 'Ä°ngilizce',
    turkish: 'TÃ¼rkÃ§e',
    
    // Upload Section
    uploadYourOutfit: 'KÄ±yafetinizi YÃ¼kleyin',
    uploadSubtitle: 'FotoÄŸraf Ã§ekin veya galeriden seÃ§in ve kÄ±yafetinizi deÄŸerlendirin',
    takePhoto: 'FotoÄŸraf Ã‡ek',
    chooseFromGallery: 'Galeriden SeÃ§',
    
    // Privacy
    privacyProtected: 'Gizlilik KorumalÄ±',
    privacyMatters: 'ðŸ”’ GizliliÄŸiniz Ã–nemli',
    privacyExplanation: 'YÃ¼zÃ¼nÃ¼z AI analizine gÃ¶nderilmeden Ã¶nce otomatik olarak maskelenir. Sadece kÄ±yafetiniz analiz edilir, kimliÄŸiniz gizli kalÄ±r.',
    faceProtected: 'YÃ¼z KorumalÄ±',
    
    // Categories
    chooseStyleCategory: 'Stil Kategorinizi SeÃ§in',
    categorySubtitle: 'HedeflediÄŸiniz stili seÃ§in ve daha hedefli bir analiz alÄ±n',
    sexy: 'Seksi',
    elegant: 'Zarif',
    casual: 'GÃ¼nlÃ¼k',
    naive: 'Masum',
    trendy: 'Trendy',
    anime: 'Anime',
    sixties: '60\'lar',
    allCategories: 'TÃ¼m Kategoriler',
    
    // Category descriptions
    sexyDesc: 'Cesur, Ã§ekici, kendinden emin',
    elegantDesc: 'Sofistike, rafine, zarif',
    casualDesc: 'Rahat, konforlu, gÃ¼nlÃ¼k',
    naiveDesc: 'TatlÄ±, masum, genÃ§',
    trendyDesc: 'Moda Ã¶ncÃ¼sÃ¼, gÃ¼ncel, ÅŸÄ±k',
    animeDesc: 'Kawaii, renkli, eÄŸlenceli',
    sixtiesDesc: 'Retro, mod, vintage',
    allCategoriesDesc: '6 kategori iÃ§in sonuÃ§ alÄ±n',
    
    // Analysis
    analyzing: 'Analiz ediliyor...',
    rateMyOutfit: 'KÄ±yafetimi DeÄŸerlendir',
    yourStyleScore: 'Stil PuanÄ±nÄ±z',
    overallStyleScore: 'Genel Stil PuanÄ±',
    selectedStyle: 'SeÃ§ilen Stil:',
    analyzedForStyle: 'Analiz Edilen Stil:',
    analysisType: 'Analiz TÃ¼rÃ¼:',
    
    // Analysis sections
    styleAnalysis: 'Stil Analizi',
    colorCoordination: 'Renk Koordinasyonu',
    accessories: 'Aksesuarlar',
    overallHarmony: 'Genel Uyum',
    overallAnalysis: 'Genel Analiz',
    categoryBreakdown: 'Kategori DÃ¶kÃ¼mÃ¼',
    improvementSuggestions: 'Ä°yileÅŸtirme Ã–nerileri',
    
    // Buttons
    newPhoto: 'Yeni FotoÄŸraf',
    chooseDifferentPhoto: 'FarklÄ± FotoÄŸraf SeÃ§',
    changeStyleCategory: 'Stil Kategorisini DeÄŸiÅŸtir',
    changeRatingCategory: 'DeÄŸerlendirme Kategorisini DeÄŸiÅŸtir',
    backToCategories: 'Kategorilere DÃ¶n',
    rateNewOutfit: 'Yeni KÄ±yafet DeÄŸerlendir',
    
    // History
    yourRatingHistory: 'DeÄŸerlendirme GeÃ§miÅŸiniz',
    historySubtitle: 'Gizlilik korumasÄ± ile son {count} kÄ±yafet deÄŸerlendirmeniz',
    noRatingsYet: 'HenÃ¼z deÄŸerlendirme yok',
    noRatingsSubtext: 'BaÅŸlamak iÃ§in ilk kÄ±yafetinizi yÃ¼kleyin!',
    
    // Subscription
    freePlan: 'Ãœcretsiz Plan',
    premiumPlan: 'Premium Plan',
    ultimatePlan: 'Ultimate Plan',
    upgrade: 'YÃ¼kselt',
    manage: 'YÃ¶net',
    analysesRemaining: 'BugÃ¼n {count} analiz hakkÄ±nÄ±z kaldÄ±',
    unlimitedAnalyses: 'SÄ±nÄ±rsÄ±z analiz hakkÄ±nÄ±z var',
    
    // Errors
    permissionNeeded: 'Ä°zin gerekli',
    cameraPermissionRequired: 'FotoÄŸraf Ã§ekmek iÃ§in kamera izni gereklidir.',
    error: 'Hata',
    failedToPickImage: 'Resim seÃ§ilemedi. LÃ¼tfen tekrar deneyin.',
    failedToAnalyze: 'KÄ±yafet analiz edilemedi. LÃ¼tfen tekrar deneyin.',
    analysisLimitReached: 'Analiz Limitine UlaÅŸÄ±ldÄ±',
    analysisLimitMessage: 'GÃ¼nlÃ¼k {limit} analiz limitinize ulaÅŸtÄ±nÄ±z. SÄ±nÄ±rsÄ±z analiz iÃ§in Premium\'a yÃ¼kseltin!',
    maybeLater: 'Belki Sonra',
    upgradeNow: 'Åžimdi YÃ¼kselt',
  },
};

export const [LanguageProvider, useLanguage] = createContextHook(() => {
  const [language, setLanguageState] = useState<Language>('en');

  useEffect(() => {
    loadLanguage();
  }, []);

  const loadLanguage = async () => {
    try {
      const savedLanguage = await AsyncStorage.getItem('app_language');
      if (savedLanguage && (savedLanguage === 'en' || savedLanguage === 'tr')) {
        setLanguageState(savedLanguage as Language);
      }
    } catch (error) {
      console.log('Error loading language:', error);
    }
  };

  const setLanguage = async (lang: Language) => {
    try {
      await AsyncStorage.setItem('app_language', lang);
      setLanguageState(lang);
    } catch (error) {
      console.log('Error saving language:', error);
    }
  };

  const t = (key: string): string => {
    const keys = key.split('.');
    let value: any = translations[language];
    
    for (const k of keys) {
      if (value && typeof value === 'object' && k in value) {
        value = value[k];
      } else {
        return key; // Return key if translation not found
      }
    }
    
    return typeof value === 'string' ? value : key;
  };

  return {
    language,
    setLanguage,
    t,
  };
});